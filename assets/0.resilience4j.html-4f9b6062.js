import{_ as n,V as s,W as a,$ as t}from"./framework-159025ca.js";const e={},p=t(`<h1 id="resilience4j" tabindex="-1"><a class="header-anchor" href="#resilience4j" aria-hidden="true">#</a> resilience4j</h1><blockquote><p>容错是指系统在部分组件（一个或多个）发生故障时仍能正常运作的能力。要具有这个能力，通常要包含断路器（CircuitBreaker）、并发调用隔离（Bulkhead）、限流（RateLimiter）、重试（Retry）、超时（Timeout）机制。</p></blockquote><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>Resilience4j 是一个专为函数式编程设计的轻量级容错库。Resilience4j 提供高阶函数（装饰器），以通过断路器、速率限制器、重试或隔板增强任何功能接口、lambda 表达式或方法引用。您可以在任何函数式接口、lambda 表达式或方法引用上堆叠多个装饰器。优点是您可以选择您需要的装饰器。</p><p>强调一下与 Netflix Hystrix 的一些差异：</p><ul><li>在 Hystrix 中，对外部系统的调用必须封装在 HystrixCommand 中。相比之下，该库提供高阶函数（装饰器），以通过断路器、速率限制器或隔板增强任何功能接口、lambda 表达式或方法引用。此外，该库还提供装饰器来重试失败的调用或缓存调用结果。您可以在任何函数式接口、lambda 表达式或方法引用上堆叠多个装饰器。这意味着，您可以将 Bulkhead、RateLimiter 和 Retry 装饰器与 CircuitBreaker 装饰器结合起来。优点是您可以选择您需要的装饰器。任何修饰函数都可以使用 CompletableFuture 或 RxJava 同步或异步执行。</li><li>当太多调用超过特定响应时间阈值时，甚至在远程系统无响应并引发异常之前，CircuitBreaker 可能会打开。</li><li>Hystrix仅在半开状态时执行一次来确定是否关闭CircuitBreaker。该库允许执行可配置的执行次数，并将结果与可配置的阈值进行比较，以确定是否关闭断路器。</li><li>该库提供自定义 Reactor 或 RxJava 运算符，以使用 Circuit Breaker、Bulkhead 或 Ratelimiter 来装饰任何反应类型。</li><li>Hystrix 和该库发出一系列事件流，这对于系统操作员监控有关执行结果和延迟的指标很有用。</li></ul><h2 id="断路器-circuitbreaker" tabindex="-1"><a class="header-anchor" href="#断路器-circuitbreaker" aria-hidden="true">#</a> 断路器（circuitbreaker）</h2><p>CircuitBreaker 通过有限状态机实现，具有三种正常状态：CLOSED、OPEN 和 HALF_OPEN 以及两种特殊状态 DISABLED 和 FORCED_OPEN。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/03/05/wj26Yt.jpg" alt="第426章" tabindex="0" loading="lazy"><figcaption>第426章</figcaption></figure><p>CircuitBreaker 使用滑动窗口来存储和聚合调用的结果。您可以在基于计数的滑动窗口和基于时间的滑动窗口之间进行选择。</p><p>基于计数的滑动窗口聚合最后 N 次调用的结果。</p><p>基于时间的滑动窗口聚合了最后 N 秒的调用结果。</p><h3 id="基于计数的滑动窗口" tabindex="-1"><a class="header-anchor" href="#基于计数的滑动窗口" aria-hidden="true">#</a> 基于计数的滑动窗口</h3><p>基于计数的滑动窗口是通过 N 个测量值的圆形阵列来实现的。 如果计数窗口大小为 10，则圆形阵列始终有 10 个测量值。 滑动窗口增量更新总聚合。当记录新的调用结果时，总聚合会更新。当最旧的测量被逐出时，将从总聚合中减去该测量并重置存储桶。（驱逐时减法）</p><p>检索快照的时间是常数 O(1)，因为快照是预先聚合的并且与窗口大小无关。 此实现的空间要求（内存消耗）应该是 O(n)。</p><h3 id="基于时间的滑动窗口" tabindex="-1"><a class="header-anchor" href="#基于时间的滑动窗口" aria-hidden="true">#</a> 基于时间的滑动窗口</h3><p>基于时间的滑动窗口是通过 N 个部分聚合（桶）的圆形数组来实现的。 如果时间窗口大小为 10 秒，则循环数组始终具有 10 个部分聚合（桶）。每个存储桶都会聚合在某个纪元秒内发生的所有调用的结果。（部分聚合）。循环数组的头桶存储当前纪元秒的调用结果。其他部分聚合存储前几秒的调用结果。 滑动窗口不单独存储调用结果（元组），而是增量更新部分聚合（桶）和总聚合。 当记录新的调用结果时，总聚合会增量更新。当最旧的存储桶被逐出时，将从总聚合中减去该存储桶的部分总聚合，并且重置该存储桶。（驱逐时减法）</p><p>检索快照的时间是常数 O(1)，因为快照是预先聚合的并且与时间窗口大小无关。 此实现的空间要求（内存消耗）应该接近恒定的 O(n)，因为调用结果（元组）不是单独存储的。仅创建 N 个部分聚合和 1 个总聚合。</p><p>部分聚合由 3 个整数组成，用于统计失败调用数、慢速调用数和调用总数。一个 long 存储所有调用的总持续时间。</p><h3 id="失败率和慢调用率阈值" tabindex="-1"><a class="header-anchor" href="#失败率和慢调用率阈值" aria-hidden="true">#</a> 失败率和慢调用率阈值</h3><p>当故障率等于或大于可配置阈值时，断路器的状态从“闭合”变为“打开”。例如，超过 50% 的调用调用失败时。 默认情况下，所有异常都算作失败。您可以定义应视为失败的异常列表。所有其他异常都将被视为成功，除非它们被忽略。异常也可以被忽略，这样它们既不被视为失败也不被视为成功。</p><p>当超时调用的百分比等于或大于可配置阈值时，CircuitBreaker 也会从 CLOSED 更改为 OPEN。例如，超过 50% 的调用时间超过 5 秒。这有助于在外部系统实际无响应之前减少其负载。</p><p>仅当记录了最小数量的调用时，才能计算失败率和超时调用率。例如，如果所需的最小调用次数为 10，则必须记录至少 10 个调用，然后才能计算故障率。如果只评估了 9 个调用，即使所有 9 个调用都失败，断路器也不会跳闸。</p><p>当CircuitBreaker处于 OPEN 状态时，它会拒绝带调用。等待时间过去后，CircuitBreaker 状态从 OPEN 更改为 HALF_OPEN，并允许可配置数量的调用来查看后端是否仍然不可用或已再次可用。进一步的调用将被拒绝，直到所有允许的调用都已完成。 如果失败率或超时调用率等于或大于配置的阈值，状态将更改回 OPEN。如果失败率和慢调用率低于阈值，则状态更改回 CLOSED。<code>CallNotPermittedException</code></p><p>断路器支持两种更特殊的状态，DISABLED（始终允许访问）和FORCED_OPEN（始终拒绝访问）。在这两种状态下，不会生成任何断路器事件（除了状态转换），也不会记录任何指标。退出这些状态的唯一方法是触发状态转换或重置断路器。</p><p>CircuitBreaker 是线程安全的，如下所示：</p><ul><li>CircuitBreaker 的状态存储在 AtomicReference 中</li><li>CircuitBreaker 使用原子操作通过无副作用函数更新状态。</li><li>记录调用和滑动窗口读取快照是同步的</li></ul><p>这意味着应该保证原子性，并且在某一时间点只有一个线程能够更新状态或滑动窗口。</p><p>但CircuitBreaker不同步函数调用。这意味着函数调用本身不是临界区的一部分。否则，断路器会带来巨大的性能损失和瓶颈。缓慢的函数调用会对整体性能/吞吐量产生巨大的负面影响。</p><p>如果有 20 个并发线程请求执行某个函数的权限，并且 CircuitBreaker 的状态为关闭，则允许所有线程调用该函数。即使滑动窗口大小为15。滑动窗口并不意味着只允许15个调用同时运行。如果要限制并发线程数，请使用 Bulkhead。您可以将隔板和断路器结合起来。</p><p>1 个线程的示例：</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/03/05/vscGxo.png" alt="607" tabindex="0" loading="lazy"><figcaption>607</figcaption></figure><p>3 个线程的示例：</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/03/05/k0DcUf.png" alt="616" tabindex="0" loading="lazy"><figcaption>616</figcaption></figure><h3 id="配置属性" tabindex="-1"><a class="header-anchor" href="#配置属性" aria-hidden="true">#</a> 配置属性</h3><table><thead><tr><th style="text-align:left;">配置属性</th><th style="text-align:left;">默认值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">failureRateThreshold</td><td style="text-align:left;">50</td><td style="text-align:left;">配置故障率阈值（以百分比表示）。当故障率等于或高于阈值时，断路器将转换为打开状态并开始短路调用。</td></tr><tr><td style="text-align:left;">slowCallRateThreshold</td><td style="text-align:left;">100</td><td style="text-align:left;">配置一个百分比阈值。当调用持续时间大于<code>slowCallDurationThreshold</code>时，断路器将把调用视为慢调用。当慢调用的百分比等于或高于阈值时，断路器将转换为打开状态并开始短路调用。</td></tr><tr><td style="text-align:left;">slowCallDurationThreshold</td><td style="text-align:left;">60000 [毫秒]</td><td style="text-align:left;">配置持续时间阈值，超过该阈值的调用将被视为慢调用并增加慢调用的比率。</td></tr><tr><td style="text-align:left;">permittedNumberOfCalls InHalfOpenState</td><td style="text-align:left;">10</td><td style="text-align:left;">配置在断路器处于半开启状态时允许的调用次数。</td></tr><tr><td style="text-align:left;">maxWaitDurationInHalfOpenState</td><td style="text-align:left;">0 [毫秒]</td><td style="text-align:left;">配置最长等待时间，控制断路器在半开启状态下可能停留的最长时间，然后切换到打开状态。值为0表示断路器将无限期等待在半开启状态，直到所有允许的调用都已完成。</td></tr><tr><td style="text-align:left;">slidingWindowType</td><td style="text-align:left;">COUNT_BASED</td><td style="text-align:left;">配置用于在断路器关闭时记录调用结果的滑动窗口的类型。滑动窗口可以是基于计数的或基于时间的。如果滑动窗口是COUNT_BASED，则记录和聚合最后<code>slidingWindowSize</code>个调用。如果滑动窗口是TIME_BASED，则记录和聚合最后<code>slidingWindowSize</code>秒的调用。</td></tr><tr><td style="text-align:left;">slidingWindowSize</td><td style="text-align:left;">100</td><td style="text-align:left;">配置用于在断路器关闭时记录调用结果的滑动窗口的大小。</td></tr><tr><td style="text-align:left;">minimumNumberOfCalls</td><td style="text-align:left;">100</td><td style="text-align:left;">配置在断路器可以计算错误率或慢调用率之前所需的最小调用次数（每个滑动窗口期间）。例如，如果minimumNumberOfCalls为10，则必须记录至少10次调用，才能计算故障率。如果只记录了9次调用，则即使所有9次调用都失败，断路器也不会转换为打开状态。</td></tr><tr><td style="text-align:left;">waitDurationInOpenState</td><td style="text-align:left;">60000 [毫秒]</td><td style="text-align:left;">断路器在从打开状态转换到半开启状态之前等待的时间。</td></tr><tr><td style="text-align:left;">automaticTransition FromOpenToHalfOpenEnabled</td><td style="text-align:left;">false</td><td style="text-align:left;">如果设置为true，意味着断路器将自动从打开状态转换为半开启状态，不需要调用来触发转换。会创建一个线程来监视所有断路器的实例，一旦waitDurationInOpenState过去，就会将它们全部转换为HALF_OPEN。而如果设置为false，则即使经过waitDurationInOpenState，只有在进行调用后才会转换为HALF_OPEN。这里的优势是没有线程监视所有断路器的状态。</td></tr><tr><td style="text-align:left;">recordExceptions</td><td style="text-align:left;">空</td><td style="text-align:left;">被记录为故障的异常列表，从而增加故障率。与<code>ignoreExceptions</code>明确忽略的异常不同，匹配或继承自列表中的任何异常都计为失败。如果指定了异常列表，则所有其他异常都计为成功，除非它们被<code>ignoreExceptions</code>明确忽略。</td></tr><tr><td style="text-align:left;">ignoreExceptions</td><td style="text-align:left;">空</td><td style="text-align:left;">被忽略的异常列表，既不计为失败也不计为成功。与<code>recordExceptions</code>中指定的异常不同，匹配或继承自列表中的任何异常都不计为失败或成功。</td></tr><tr><td style="text-align:left;">recordFailurePredicate</td><td style="text-align:left;">throwable -&gt; true 默认情况下，所有异常都记录为失败。</td><td style="text-align:left;">自定义断言，用于评估是否应将异常记录为失败。如果异常应计为失败，则Predicate必须返回true。如果异常应计为成功，则Predicate必须返回false，除非异常被<code>ignoreExceptions</code>明确忽略。</td></tr><tr><td style="text-align:left;">ignoreExceptionPredicate</td><td style="text-align:left;">throwable -&gt; false 默认情况下，不会忽略任何异常。</td><td style="text-align:left;">自定义断言，用于评估是否应忽略异常，既不计为失败也不计为成功。如果应忽略异常，则Predicate必须返回true。如果异常应计为失败，则Predicate必须返回false。</td></tr></tbody></table><h2 id="隔板-bulkhead" tabindex="-1"><a class="header-anchor" href="#隔板-bulkhead" aria-hidden="true">#</a> 隔板(Bulkhead)</h2><p>在系统设计中，需要预期故障的发生，将应用程序拆分成多个组件，通过资源隔离确保一个组件的故障不会影响其他的组件。例如：</p><p><strong>生活</strong>：就像轮船用隔板（Bulkhead）分成多个小隔间，每个隔间都被隔板密封，这样可以防止洪水时整艘船沉没。</p><p><strong>系统</strong>：两个服务 A 和服务 B，A 的某些 API 依赖 B，当服务 B 运行速度非常慢的时候，A 调用 B 的请求变多时，A 的性能会受到影响，服务 A 中那些不依赖于服务 B 的功能也无法处理。因此，需要隔离资源专门处理服务 A 依赖服务 B 的调用请求。</p><p>并发调用的隔离一般有两种方式来实现：信号量 Semaphore 和线程池 ThreadPool。Resilience4j 提供了 SemaphoreBulkhead 和 FixedThreadPoolBulkhead 来实现 Bulkhead。</p><p>Resilience4j 提供了两种隔板模式的实现，可用于限制并发执行的数量：</p><ul><li>使用信号量<code>SemaphoreBulkhead</code></li><li>使用有界队列和固定线程池。<code>FixedThreadPoolBulkhead</code></li></ul><p>它们应该可以在各种线程和 I/O 模型中正常工作。它基于信号量，与 Hystrix 不同，它不提供“影子”线程池选项。由客户端来确保正确的线程池大小与舱壁配置一致。</p><h3 id="配置属性-1" tabindex="-1"><a class="header-anchor" href="#配置属性-1" aria-hidden="true">#</a> 配置属性</h3><p><strong>Bulkhead:</strong></p><table><thead><tr><th style="text-align:left;">配置属性</th><th style="text-align:left;">默认值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">maxConcurrentCalls</td><td style="text-align:left;">25</td><td style="text-align:left;">信号量隔离器允许的最大并行执行次数</td></tr><tr><td style="text-align:left;">maxWaitDuration</td><td style="text-align:left;">0</td><td style="text-align:left;">当尝试进入饱和的信号量隔离器时，线程应阻塞的最长时间。</td></tr></tbody></table><p><strong>ThreadPoolBulkhead:</strong></p><table><thead><tr><th style="text-align:left;">配置属性</th><th style="text-align:left;">默认值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">maxThreadPoolSize</td><td style="text-align:left;">Runtime.getRuntime().availableProcessors()</td><td style="text-align:left;">配置最大线程池大小。</td></tr><tr><td style="text-align:left;">coreThreadPoolSize</td><td style="text-align:left;">Runtime.getRuntime().availableProcessors() - 1</td><td style="text-align:left;">配置核心线程池大小。</td></tr><tr><td style="text-align:left;">queueCapacity</td><td style="text-align:left;">100</td><td style="text-align:left;">配置队列的容量。</td></tr><tr><td style="text-align:left;">keepAliveDuration</td><td style="text-align:left;">20 [ms]</td><td style="text-align:left;">当线程数大于核心线程数时，这是空闲线程等待新任务的最长时间，然后终止。</td></tr><tr><td style="text-align:left;">writableStackTraceEnabled</td><td style="text-align:left;">true</td><td style="text-align:left;">当发生信号量隔离器异常时，输出堆栈跟踪错误。如果为 false，则输出包含信号量隔离器异常的单行。</td></tr></tbody></table><h2 id="限流-ratelimiter" tabindex="-1"><a class="header-anchor" href="#限流-ratelimiter" aria-hidden="true">#</a> 限流(ratelimiter)</h2><p>速率限制是为 API 的扩展做好准备并建立服务的高可用性和可靠性的一项必要技术。</p><p>而且，该技术还提供了一系列不同的选项，用于处理检测到的限制剩余，或者您想要限制什么类型的请求。您可以简单地拒绝此超出限制的请求，或者构建一个队列以便稍后执行它们，或者以某种方式组合这两种方法。</p><p>Resilience4j 提供了一个 RateLimiter，可将从纪元开始的所有纳秒分割成多个周期。每个周期的持续时间由 RateLimiterConfig.limitRefreshPeriod 配置。在每个周期开始时，RateLimiter 会将活动权限数设置为 RateLimiterConfig.limitForPeriod。 对于 RateLimiter 调用者来说，看起来确实是这样，但对于 AtomicRateLimiter 实现来说，如果 RateLimiter 没有被频繁使用，它就会跳过这次刷新。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/03/05/ZtaS5O.png" alt="1798" tabindex="0" loading="lazy"><figcaption>1798</figcaption></figure><p>RateLimiter 的默认实现是通过 AtomicReference 管理其状态。AtomicRateLimiter.State 是完全不可变的，并具有以下字段：<code>AtomicRateLimiter</code></p><ul><li><code>activeCycle</code>- 上次调用使用的周期号</li><li><code>activePermissions</code>- 上次调用后可用权限的计数。 如果保留某些权限，则可能为负数</li><li><code>nanosToWait</code>- 等待最后一次调用许可的纳秒数</li></ul><p>还有一个 SemaphoreBasedRateLimiter，它使用信号量和一个调度程序，该调度程序将在每个 RateLimiterConfig#limitRefreshPeriod 之后刷新权限。</p><h3 id="配置属性-2" tabindex="-1"><a class="header-anchor" href="#配置属性-2" aria-hidden="true">#</a> 配置属性</h3><table><thead><tr><th style="text-align:left;">配置属性</th><th style="text-align:left;">默认值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">timeoutDuration</td><td style="text-align:left;">5 [s]</td><td style="text-align:left;">线程等待权限的默认等待时间。</td></tr><tr><td style="text-align:left;">limitRefreshPeriod</td><td style="text-align:left;">500 [ns]</td><td style="text-align:left;">限流器刷新限制的周期。每个周期后，限流器将其权限计数设置回 limitForPeriod 的值。</td></tr><tr><td style="text-align:left;">limitForPeriod</td><td style="text-align:left;">50</td><td style="text-align:left;">在一个限流刷新周期内可用的权限数量。</td></tr></tbody></table><h2 id="重试-retry" tabindex="-1"><a class="header-anchor" href="#重试-retry" aria-hidden="true">#</a> 重试(Retry)</h2><p>微服务体系中，多个服务互相依赖，当被依赖的服务出现问题而无法按预期响应时，就会级联到下游服务，导致不良的用户体验。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/03/05/jVOL2V.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>同样，在微服务体系中，一个服务会有多个实例，如果其中一个实例可能有问题，并且无法正确响应我们的请求，则如果我们重试该请求，则负载均衡器可以将请求发送到运行状况良好的节点并正确获得响应。通过重试，有更多机会获得正确的响应。</p><figure><img src="https://cdn.jsdelivr.net/gh/fxzbiz/img@url/2024/03/05/ZiwoCi.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="配置属性-3" tabindex="-1"><a class="header-anchor" href="#配置属性-3" aria-hidden="true">#</a> 配置属性</h3><table><thead><tr><th style="text-align:left;">配置属性</th><th style="text-align:left;">默认值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">maxAttempts</td><td style="text-align:left;">3</td><td style="text-align:left;">最大尝试次数（包括初始调用作为第一次尝试）。</td></tr><tr><td style="text-align:left;">waitDuration</td><td style="text-align:left;">500 [ms]</td><td style="text-align:left;">重试尝试之间的固定等待时长。</td></tr><tr><td style="text-align:left;">intervalFunction</td><td style="text-align:left;">numOfAttempts -&gt; waitDuration</td><td style="text-align:left;">修改失败后等待间隔的函数。默认情况下，等待持续时间保持不变。</td></tr><tr><td style="text-align:left;">intervalBiFunction</td><td style="text-align:left;">(numOfAttempts, Either&lt;throwable, result&gt;) -&gt; waitDuration</td><td style="text-align:left;">基于尝试次数和结果或异常修改失败后等待间隔的函数。当与 intervalFunction 一起使用时，将抛出 IllegalStateException。</td></tr><tr><td style="text-align:left;">retryOnResultPredicate</td><td style="text-align:left;">result -&gt; false</td><td style="text-align:left;">配置一个断言，评估是否应该重试结果。如果结果应该重试，则断言必须返回 true，否则必须返回 false。</td></tr><tr><td style="text-align:left;">retryExceptionPredicate</td><td style="text-align:left;">throwable -&gt; true</td><td style="text-align:left;">配置一个断言，评估是否应该重试异常。如果异常应该重试，则断言必须返回 true，否则必须返回 false。</td></tr><tr><td style="text-align:left;">retryExceptions</td><td style="text-align:left;">empty</td><td style="text-align:left;">配置作为失败记录并因此重试的 Throwable 类列表。此参数支持子类型。</td></tr><tr><td style="text-align:left;">ignoreExceptions</td><td style="text-align:left;">empty</td><td style="text-align:left;">配置应忽略并因此不重试的 Throwable 类列表。此参数支持子类型。</td></tr><tr><td style="text-align:left;">failAfterMaxAttempts</td><td style="text-align:left;">false</td><td style="text-align:left;">启用或禁用在 Retry 达到配置的 maxAttempts 并且结果仍未通过 retryOnResultPredicate 时抛出 MaxRetriesExceededException 的布尔值。</td></tr></tbody></table><h2 id="超时-timelimiter" tabindex="-1"><a class="header-anchor" href="#超时-timelimiter" aria-hidden="true">#</a> 超时(timelimiter)</h2><p>在微服务体系中，服务间相互依赖，例如：A—&gt;B—&gt;C—&gt;D，可能由于某些网络原因，导致被依赖服务 D 无法按预期响应，这种缓慢会导致下游服务一直到服务 A，并且阻塞单个服务中的线程。由于这不是很常见的问题，在设计时需要设置超时来应对服务缓慢/不可用性问题。</p><ul><li>即使依赖服务不可用，也可以使核心服务始终工作</li><li>避免无限期的等待</li><li>避免阻塞任何线程</li><li>使用一些缓存的响应来处理与网络相关的问题并使系统保持运行状态</li></ul><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h2><h3 id="属性配置" tabindex="-1"><a class="header-anchor" href="#属性配置" aria-hidden="true">#</a> <strong>属性配置</strong></h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">resilience4j.circuitbreaker</span><span class="token punctuation">:</span> <span class="token comment"># 配置 CircuitBreaker 断路器</span>
    <span class="token key atrule">configs</span><span class="token punctuation">:</span> <span class="token comment"># 配置断路器的策略</span>
        <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 默认策略</span>
            <span class="token key atrule">registerHealthIndicator</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否注册健康指标</span>
            <span class="token key atrule">slidingWindowSize</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token comment"># 窗口大小，表示断路器跟踪的最近调用次数</span>
            <span class="token key atrule">minimumNumberOfCalls</span><span class="token punctuation">:</span> <span class="token number">5</span>  <span class="token comment"># 最小调用次数，用于计算断路器状态</span>
            <span class="token key atrule">permittedNumberOfCallsInHalfOpenState</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 半开状态下允许的最大调用次数</span>
            <span class="token key atrule">automaticTransitionFromOpenToHalfOpenEnabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否启用自动从开启状态转为半开启状态</span>
            <span class="token key atrule">waitDurationInOpenState</span><span class="token punctuation">:</span> 5s <span class="token comment"># 在开启状态下等待时间</span>
            <span class="token key atrule">failureRateThreshold</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 失败率阈值，超过此值将触发断路器开启</span>
            <span class="token key atrule">eventConsumerBufferSize</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 事件消费缓冲区大小</span>
            <span class="token key atrule">recordExceptions</span><span class="token punctuation">:</span> <span class="token comment"># 需要记录的异常类型列表</span>
                <span class="token punctuation">-</span> org.springframework.web.client.HttpServerErrorException
                <span class="token punctuation">-</span> java.util.concurrent.TimeoutException
                <span class="token punctuation">-</span> java.io.IOException
            <span class="token key atrule">ignoreExceptions</span><span class="token punctuation">:</span> <span class="token comment"># 需要忽略的异常类型列表</span>
                <span class="token punctuation">-</span> io.github.robwin.exception.BusinessException
        <span class="token key atrule">shared</span><span class="token punctuation">:</span> <span class="token comment"># 共享策略</span>
            <span class="token key atrule">slidingWindowSize</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token comment"># 窗口大小</span>
            <span class="token key atrule">permittedNumberOfCallsInHalfOpenState</span><span class="token punctuation">:</span> <span class="token number">30</span> <span class="token comment"># 半开状态下允许的最大调用次数</span>
            <span class="token key atrule">waitDurationInOpenState</span><span class="token punctuation">:</span> 1s <span class="token comment"># 在开启状态下等待时间</span>
            <span class="token key atrule">failureRateThreshold</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 失败率阈值</span>
            <span class="token key atrule">eventConsumerBufferSize</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 事件消费缓冲区大小</span>
            <span class="token key atrule">ignoreExceptions</span><span class="token punctuation">:</span> <span class="token comment"># 需要忽略的异常类型列表</span>
                <span class="token punctuation">-</span> io.github.robwin.exception.BusinessException
    <span class="token key atrule">instances</span><span class="token punctuation">:</span> <span class="token comment"># 实例配置</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span> <span class="token comment"># 后端A实例配置</span>
            <span class="token key atrule">baseConfig</span><span class="token punctuation">:</span> default <span class="token comment"># 使用默认配置</span>
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span> <span class="token comment"># 后端B实例配置</span>
            <span class="token key atrule">registerHealthIndicator</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否注册健康指标</span>
            <span class="token key atrule">slidingWindowSize</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 窗口大小</span>
            <span class="token key atrule">minimumNumberOfCalls</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 最小调用次数</span>
            <span class="token key atrule">permittedNumberOfCallsInHalfOpenState</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 半开状态下允许的最大调用次数</span>
            <span class="token key atrule">waitDurationInOpenState</span><span class="token punctuation">:</span> 5s <span class="token comment"># 在开启状态下等待时间</span>
            <span class="token key atrule">failureRateThreshold</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 失败率阈值</span>
            <span class="token key atrule">eventConsumerBufferSize</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 事件消费缓冲区大小</span>
            <span class="token key atrule">recordFailurePredicate</span><span class="token punctuation">:</span> io.github.robwin.exception.RecordFailurePredicate <span class="token comment"># 记录失败的断言条件</span>
<span class="token key atrule">resilience4j.retry</span><span class="token punctuation">:</span> <span class="token comment"># 配置 Retry 重试策略</span>
    <span class="token key atrule">configs</span><span class="token punctuation">:</span> <span class="token comment"># 配置重试策略的选项</span>
        <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 默认策略</span>
            <span class="token key atrule">maxAttempts</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 最大重试次数，当达到最大重试次数后，将不再继续重试</span>
            <span class="token key atrule">waitDuration</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token comment"># 每次重试的等待时间，单位为毫秒</span>
            <span class="token key atrule">retryExceptions</span><span class="token punctuation">:</span> <span class="token comment"># 需要重试的异常类型列表</span>
                <span class="token punctuation">-</span> org.springframework.web.client.HttpServerErrorException <span class="token comment"># 示例：Spring 的 HTTP 服务端错误异常</span>
                <span class="token punctuation">-</span> java.util.concurrent.TimeoutException <span class="token comment"># 示例：Java 中的超时异常</span>
                <span class="token punctuation">-</span> java.io.IOException <span class="token comment"># 示例：Java 中的 IO 异常</span>
            <span class="token key atrule">ignoreExceptions</span><span class="token punctuation">:</span> <span class="token comment"># 需要忽略的异常类型列表</span>
                <span class="token punctuation">-</span> io.github.robwin.exception.BusinessException <span class="token comment"># 示例：自定义的业务异常</span>
    <span class="token key atrule">instances</span><span class="token punctuation">:</span> <span class="token comment"># 配置 Retry 重试策略的实例</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span> <span class="token comment"># 后端 A</span>
            <span class="token key atrule">baseConfig</span><span class="token punctuation">:</span> default <span class="token comment"># 使用默认的配置</span>
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span> <span class="token comment"># 后端 B</span>
            <span class="token key atrule">baseConfig</span><span class="token punctuation">:</span> default <span class="token comment"># 使用默认的配置</span>

<span class="token key atrule">resilience4j.bulkhead</span><span class="token punctuation">:</span> <span class="token comment"># 配置 Bulkhead 信号量隔离策略</span>
    <span class="token key atrule">configs</span><span class="token punctuation">:</span> <span class="token comment"># 配置 Bulkhead 信号量隔离策略的选项</span>
        <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 默认策略</span>
            <span class="token key atrule">maxConcurrentCalls</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token comment"># 最大并发调用数，表示同时允许的最大请求数</span>
    <span class="token key atrule">instances</span><span class="token punctuation">:</span> <span class="token comment"># 配置 Bulkhead 信号量隔离策略的实例</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span> <span class="token comment"># 后端 A</span>
            <span class="token key atrule">maxConcurrentCalls</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 该后端的最大并发调用数</span>
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span> <span class="token comment"># 后端 B</span>
            <span class="token key atrule">maxWaitDuration</span><span class="token punctuation">:</span> 10ms <span class="token comment"># 最大等待时间，表示在达到最大并发调用数后，新的请求最长等待的时间</span>
            <span class="token key atrule">maxConcurrentCalls</span><span class="token punctuation">:</span> <span class="token number">20</span> <span class="token comment"># 该后端的最大并发调用数</span>


<span class="token key atrule">resilience4j.thread-pool-bulkhead</span><span class="token punctuation">:</span> <span class="token comment"># 配置线程池 Bulkhead 策略</span>
    <span class="token key atrule">configs</span><span class="token punctuation">:</span> <span class="token comment"># 配置线程池 Bulkhead 策略的选项</span>
        <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 默认策略</span>
            <span class="token key atrule">maxThreadPoolSize</span><span class="token punctuation">:</span> <span class="token number">4</span> <span class="token comment"># 最大线程池大小，表示线程池中允许的最大线程数</span>
            <span class="token key atrule">coreThreadPoolSize</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># 核心线程池大小，表示线程池中保持活动状态的最小线程数</span>
            <span class="token key atrule">queueCapacity</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># 队列容量，表示等待队列的最大容量</span>
    <span class="token key atrule">instances</span><span class="token punctuation">:</span> <span class="token comment"># 配置线程池 Bulkhead 策略的实例</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span> <span class="token comment"># 后端 A</span>
            <span class="token key atrule">baseConfig</span><span class="token punctuation">:</span> default <span class="token comment"># 使用默认的配置</span>
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span> <span class="token comment"># 后端 B</span>
            <span class="token key atrule">maxThreadPoolSize</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 最大线程池大小，表示线程池中允许的最大线程数</span>
            <span class="token key atrule">coreThreadPoolSize</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 核心线程池大小，表示线程池中保持活动状态的最小线程数</span>
            <span class="token key atrule">queueCapacity</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 队列容量，表示等待队列的最大容量</span>

<span class="token key atrule">resilience4j.ratelimiter</span><span class="token punctuation">:</span> <span class="token comment"># 配置限流器策略</span>
    <span class="token key atrule">configs</span><span class="token punctuation">:</span> <span class="token comment"># 配置限流器策略的选项</span>
        <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 默认策略</span>
            <span class="token key atrule">registerHealthIndicator</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否注册健康指示器，默认为 false</span>
            <span class="token key atrule">limitForPeriod</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 每个时间周期的限流阈值，表示每个时间周期内允许的最大请求数</span>
            <span class="token key atrule">limitRefreshPeriod</span><span class="token punctuation">:</span> 1s <span class="token comment"># 限流周期，表示限流阈值重置的时间周期</span>
            <span class="token key atrule">timeoutDuration</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 超时持续时间，表示请求等待执行的最长时间，单位为毫秒，0 表示无限期等待</span>
            <span class="token key atrule">eventConsumerBufferSize</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token comment"># 事件消费者缓冲区大小，表示事件消费者队列的最大容量</span>
    <span class="token key atrule">instances</span><span class="token punctuation">:</span> <span class="token comment"># 配置限流器策略的实例</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span> <span class="token comment"># 后端 A</span>
            <span class="token key atrule">baseConfig</span><span class="token punctuation">:</span> default <span class="token comment"># 使用默认的配置</span>
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span> <span class="token comment"># 后端 B</span>
            <span class="token key atrule">limitForPeriod</span><span class="token punctuation">:</span> <span class="token number">6</span> <span class="token comment"># 后端 B 的每个时间周期的限流阈值为 6</span>
            <span class="token key atrule">limitRefreshPeriod</span><span class="token punctuation">:</span> 500ms <span class="token comment"># 后端 B 的限流周期为 500 毫秒</span>
            <span class="token key atrule">timeoutDuration</span><span class="token punctuation">:</span> 3s <span class="token comment"># 后端 B 的超时持续时间为 3 秒</span>


<span class="token key atrule">resilience4j.timelimiter</span><span class="token punctuation">:</span> <span class="token comment"># 配置时间限制器策略</span>
    <span class="token key atrule">configs</span><span class="token punctuation">:</span> <span class="token comment"># 配置时间限制器策略的选项</span>
        <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 默认策略</span>
            <span class="token key atrule">cancelRunningFuture</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否取消正在运行的 Future，默认为 false，表示不取消正在运行的 Future</span>
            <span class="token key atrule">timeoutDuration</span><span class="token punctuation">:</span> 2s <span class="token comment"># 超时持续时间，表示请求的最长等待时间，单位为秒</span>
    <span class="token key atrule">instances</span><span class="token punctuation">:</span> <span class="token comment"># 配置时间限制器策略的实例</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span> <span class="token comment"># 后端 A</span>
            <span class="token key atrule">baseConfig</span><span class="token punctuation">:</span> default <span class="token comment"># 使用默认的配置</span>
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span> <span class="token comment"># 后端 B</span>
            <span class="token key atrule">baseConfig</span><span class="token punctuation">:</span> default <span class="token comment"># 使用默认的配置</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>controller层</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/backendA&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BackendAController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Service</span> businessAService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">BackendAController</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;backendAService&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Service</span> businessAService<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>businessAService <span class="token operator">=</span> businessAService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 效果：	
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>断路器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 断路器以10次调用为周期计算失败率。一旦调用次数达到5次，开始计算失败率，一旦失败率超过50%，断路器将会打开，
     * 后续的请求会直接返回fallback结果。在断路器打开的状态下，所有的请求都会被快速失败，
     * 不会再尝试调用被保护的方法。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>经过等待时间（5秒）后，断路器会进入半开启状态。在半开启状态下，断路器将允许一定数量（3个）的请求通过，
     * 以检测被保护的方法是否已经恢复正常。如果这些请求中的成功率超过50%，则断路器会关闭，
     * 允许后续的请求正常调用被保护的方法。如果仍然失败，则断路器会继续保持打开状态。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>限流<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 限流策略设置了最大并发数为10。这意味着超过10个并发请求会被限制，并且直接返回fallback结果。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>重试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 重试策略设置了最多重试3次，并且每次重试之间的间隔为100毫秒。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;failure&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">failure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> businessAService<span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 调用成功 不会重试
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> businessAService<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 没有记录的异常 不会打开断路器
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;successException&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">successException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> businessAService<span class="token punctuation">.</span><span class="token function">successException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 因为抛出的是被忽略的异常 所以不会打开断路器
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;ignore&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> businessAService<span class="token punctuation">.</span><span class="token function">ignoreException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 调用成功
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;monoSuccess&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">monoSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> businessAService<span class="token punctuation">.</span><span class="token function">monoSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 调用失败，从minimumNumberOfCalls(5)次开始计算失败率，超过failureRateThreshold(50%)后打开断路器 此时也会触发重试
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;monoFailure&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">monoFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> businessAService<span class="token punctuation">.</span><span class="token function">monoFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 调用成功
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;fluxSuccess&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">fluxSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> businessAService<span class="token punctuation">.</span><span class="token function">fluxSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 每次调用都会超时失败，从minimumNumberOfCalls(5)次开始计算失败率，超过failureRateThreshold(50%)后打开断路器，每次返回monoFallback
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;monoTimeout&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">monoTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> businessAService<span class="token punctuation">.</span><span class="token function">monoTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 每次调用都会超时失败，从minimumNumberOfCalls(5)次开始计算失败率，超过failureRateThreshold(50%)后打开断路器，每次返回fluxFallback
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;fluxTimeout&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">fluxTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> businessAService<span class="token punctuation">.</span><span class="token function">fluxTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 线程池隔离,超出线程池容量的失败
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;futureFailure&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">futureFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> businessAService<span class="token punctuation">.</span><span class="token function">futureFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 线程池隔离，超出线程池容量调用失败
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;futureSuccess&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">futureSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> businessAService<span class="token punctuation">.</span><span class="token function">futureSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 线程池隔离 注意返回的fallback内容 10个里面是6个超时 4个线程池满
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;futureTimeout&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">futureTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> businessAService<span class="token punctuation">.</span><span class="token function">futureTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 失败+重试+断路
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;fluxFailure&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">fluxFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> businessAService<span class="token punctuation">.</span><span class="token function">fluxFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 失败+fallback但是不重试
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;fallback&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">failureWithFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> businessAService<span class="token punctuation">.</span><span class="token function">failureWithFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Service层</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;backendAService&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BackendAService</span> <span class="token keyword">implements</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BACKEND_A</span> <span class="token operator">=</span> <span class="token string">&quot;backendA&quot;</span><span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>断路器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 断路器以10次调用为周期计算失败率。一旦调用次数达到5次，开始计算失败率，一旦失败率超过50%，断路器将会打开，
     * 后续的请求会直接返回fallback结果。在断路器打开的状态下，所有的请求都会被快速失败，
     * 不会再尝试调用被保护的方法。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>经过等待时间（5秒）后，断路器会进入半开启状态。在半开启状态下，断路器将允许一定数量（3个）的请求通过，
     * 以检测被保护的方法是否已经恢复正常。如果这些请求中的成功率超过50%，则断路器会关闭，
     * 允许后续的请求正常调用被保护的方法。如果仍然失败，则断路器会继续保持打开状态。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>限流<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 限流策略设置了最大并发数为10。这意味着超过10个并发请求会被限制，并且直接返回fallback结果。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>重试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 重试策略设置了最多重试3次，并且每次重试之间的间隔为100毫秒。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Bulkhead</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Retry</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">failure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpServerErrorException</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">,</span> <span class="token string">&quot;This is a remote exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 因为抛出的是被忽略的异常 所以不会打开断路器
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Bulkhead</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">ignoreException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">&quot;This exception is ignored by the CircuitBreaker of backend A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 调用成功 不会重试
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Bulkhead</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Retry</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello World from backend A&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 没有记录的异常 不会打开断路器
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Bulkhead</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">successException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpClientErrorException</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">,</span> <span class="token string">&quot;This is a remote client exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 失败+重试+断路
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Bulkhead</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Retry</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">fluxFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;BAM!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 每次调用都会超时失败，从minimumNumberOfCalls(5)次开始计算失败率，超过failureRateThreshold(50%)后打开断路器，每次返回fluxFallback
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@TimeLimiter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">,</span> fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;fluxFallback&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">fluxTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span>
                <span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World from backend A&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">delayElements</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 调用成功
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@TimeLimiter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Bulkhead</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Retry</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">monoSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World from backend A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 调用失败，从minimumNumberOfCalls(5)次开始计算失败率，超过failureRateThreshold(50%)后打开断路器 此时也会触发重试
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Bulkhead</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Retry</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">monoFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;BAM!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 每次调用都会超时失败，从minimumNumberOfCalls(5)次开始计算失败率，超过failureRateThreshold(50%)后打开断路器，每次返回monoFallback
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@TimeLimiter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Bulkhead</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">,</span> fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;monoFallback&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">monoTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World from backend A&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">delayElement</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 调用成功
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@TimeLimiter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Retry</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">fluxSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 失败+fallback但是不重试
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">,</span> fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;fallback&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">failureWithFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">failure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 线程池隔离，超出线程池容量调用失败
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Bulkhead</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">THREADPOOL</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@TimeLimiter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Retry</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">futureSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World from backend A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 线程池隔离,超出线程池容量的失败
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Bulkhead</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">THREADPOOL</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@TimeLimiter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Retry</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">futureFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        future<span class="token punctuation">.</span><span class="token function">completeExceptionally</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;BAM!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> future<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 线程池隔离 注意返回的fallback内容 10个里面是6个超时 4个线程池满
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Bulkhead</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">THREADPOOL</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@TimeLimiter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">BACKEND_A</span><span class="token punctuation">,</span> fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;futureFallback&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">futureTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Try</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World from backend A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token class-name">HttpServerErrorException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Recovered HttpServerErrorException: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Recovered: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">futureFallback</span><span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">&quot;Recovered specific TimeoutException: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">futureFallback</span><span class="token punctuation">(</span><span class="token class-name">BulkheadFullException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">&quot;Recovered specific BulkheadFullException: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">futureFallback</span><span class="token punctuation">(</span><span class="token class-name">CallNotPermittedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">&quot;Recovered specific CallNotPermittedException: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">monoFallback</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;monoFallback：Recovered: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">fluxFallback</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;Recovered: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="现象分析" tabindex="-1"><a class="header-anchor" href="#现象分析" aria-hidden="true">#</a> 现象分析</h3><ul><li>断路：</li></ul><p>minimumNumberOfCalls配置项用于指定在断路器开始考虑状态转换之前需要进行的最小调用次数。 当调用次数达到或超过此配置项指定的值时，断路器开始考虑是否应该触发状态转换（例如，从关闭状态到打开状态）。 如果在达到这个阈值之前出现了故障或异常，断路器将不会考虑状态转换。这个配置项允许在调用次数较少时避免过早地触发断路器，从而更好地适应服务的实际负载。 slidingWindowSize 表示断路器跟踪的最近调用次数，它的作用是用于计算断路器的状态。 具体来说，当我们配置了一个断路器时，它会跟踪最近一段时间内的调用情况，根据这些调用情况来判断是否需要开启或关闭断路器。 假设我们设置了 slidingWindowSize 为 10，意味着断路器将跟踪最近的 10 次调用情况。 如果在这 10 次调用中有超过 failureRateThreshold 指定的失败率的调用，那么断路器可能会触发开启状态，即进入熔断状态，不再向下游服务发起调用。 如果在开启状态下经过了 waitDurationInOpenState 指定的等待时间后，断路器会尝试转为半开启状态，即允许部分请求通过来检测服务是否恢复正常。 在半开启状态下，如果通过 permittedNumberOfCallsInHalfOpenState 指定的调用次数内有足够的成功调用，断路器将会关闭，否则会重新进入开启状态。 因此，slidingWindowSize 的值影响了断路器对调用情况的跟踪粒度，较小的值会使断路器更加敏感地感知到调用失败，而较大的值则会使其更加平滑地反应调用情况的变化。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">resilience4j.circuitbreaker</span><span class="token punctuation">:</span> <span class="token comment"># 配置 CircuitBreaker 断路器</span>
    <span class="token key atrule">configs</span><span class="token punctuation">:</span> <span class="token comment"># 配置断路器的策略</span>
        <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 默认策略</span>
            <span class="token key atrule">registerHealthIndicator</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否注册健康指标</span>
            <span class="token key atrule">slidingWindowSize</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token comment"># 窗口大小，表示断路器跟踪的最近调用次数</span>
            <span class="token key atrule">minimumNumberOfCalls</span><span class="token punctuation">:</span> <span class="token number">5</span>  <span class="token comment"># 最小调用次数，用于计算断路器状态</span>
            <span class="token key atrule">permittedNumberOfCallsInHalfOpenState</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 半开状态下允许的最大调用次数</span>
            <span class="token key atrule">automaticTransitionFromOpenToHalfOpenEnabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否启用自动从开启状态转为半开启状态</span>
            <span class="token key atrule">waitDurationInOpenState</span><span class="token punctuation">:</span> 5s <span class="token comment"># 在开启状态下等待时间</span>
            <span class="token key atrule">failureRateThreshold</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 失败率阈值，超过此值将触发断路器开启</span>
            <span class="token key atrule">eventConsumerBufferSize</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 事件消费缓冲区大小</span>
            <span class="token key atrule">recordExceptions</span><span class="token punctuation">:</span> <span class="token comment"># 需要记录的异常类型列表</span>
                <span class="token punctuation">-</span> org.springframework.web.client.HttpServerErrorException
                <span class="token punctuation">-</span> java.util.concurrent.TimeoutException
                <span class="token punctuation">-</span> java.io.IOException
            <span class="token key atrule">ignoreExceptions</span><span class="token punctuation">:</span> <span class="token comment"># 需要忽略的异常类型列表</span>
                <span class="token punctuation">-</span> io.github.robwin.exception.BusinessException
        <span class="token key atrule">shared</span><span class="token punctuation">:</span> <span class="token comment"># 共享策略</span>
            <span class="token key atrule">slidingWindowSize</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token comment"># 窗口大小</span>
            <span class="token key atrule">permittedNumberOfCallsInHalfOpenState</span><span class="token punctuation">:</span> <span class="token number">30</span> <span class="token comment"># 半开状态下允许的最大调用次数</span>
            <span class="token key atrule">waitDurationInOpenState</span><span class="token punctuation">:</span> 1s <span class="token comment"># 在开启状态下等待时间</span>
            <span class="token key atrule">failureRateThreshold</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 失败率阈值</span>
            <span class="token key atrule">eventConsumerBufferSize</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 事件消费缓冲区大小</span>
            <span class="token key atrule">ignoreExceptions</span><span class="token punctuation">:</span> <span class="token comment"># 需要忽略的异常类型列表</span>
                <span class="token punctuation">-</span> io.github.robwin.exception.BusinessException
    <span class="token key atrule">instances</span><span class="token punctuation">:</span> <span class="token comment"># 实例配置</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span> <span class="token comment"># 后端A实例配置</span>
            <span class="token key atrule">baseConfig</span><span class="token punctuation">:</span> default <span class="token comment"># 使用默认配置</span>
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span> <span class="token comment"># 后端B实例配置</span>
            <span class="token key atrule">registerHealthIndicator</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否注册健康指标</span>
            <span class="token key atrule">slidingWindowSize</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 窗口大小</span>
            <span class="token key atrule">minimumNumberOfCalls</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 最小调用次数</span>
            <span class="token key atrule">permittedNumberOfCallsInHalfOpenState</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 半开状态下允许的最大调用次数</span>
            <span class="token key atrule">waitDurationInOpenState</span><span class="token punctuation">:</span> 5s <span class="token comment"># 在开启状态下等待时间</span>
            <span class="token key atrule">failureRateThreshold</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 失败率阈值</span>
            <span class="token key atrule">eventConsumerBufferSize</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 事件消费缓冲区大小</span>
            <span class="token key atrule">recordFailurePredicate</span><span class="token punctuation">:</span> io.github.robwin.exception.RecordFailurePredicate <span class="token comment"># 记录失败的断言条件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>隔板：</li></ul><p><code>resilience4j.bulkhead</code> 是用于配置 Bulkhead（舱壁）模式的功能，它是一种资源隔离策略，用于保护系统免受过度负载而导致的故障。</p><p>在并发请求过多的情况下，如果不进行限制，可能会导致系统资源耗尽，从而导致系统性能下降甚至崩溃。Bulkhead 模式通过限制并发请求的数量，将系统资源划分为多个独立的区域（舱壁），以保护每个区域不受其他区域的影响。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">resilience4j.bulkhead</span><span class="token punctuation">:</span> <span class="token comment"># 配置 Bulkhead 信号量隔离策略</span>
    <span class="token key atrule">configs</span><span class="token punctuation">:</span> <span class="token comment"># 配置 Bulkhead 信号量隔离策略的选项</span>
        <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 默认策略</span>
            <span class="token key atrule">maxConcurrentCalls</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token comment"># 最大并发调用数，表示同时允许的最大请求数</span>
    <span class="token key atrule">instances</span><span class="token punctuation">:</span> <span class="token comment"># 配置 Bulkhead 信号量隔离策略的实例</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span> <span class="token comment"># 后端 A</span>
            <span class="token key atrule">maxConcurrentCalls</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 该后端的最大并发调用数</span>
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span> <span class="token comment"># 后端 B</span>
            <span class="token key atrule">maxWaitDuration</span><span class="token punctuation">:</span> 10ms <span class="token comment"># 最大等待时间，表示在达到最大并发调用数后，新的请求最长等待的时间</span>
            <span class="token key atrule">maxConcurrentCalls</span><span class="token punctuation">:</span> <span class="token number">20</span> <span class="token comment"># 该后端的最大并发调用数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>resilience4j.thread-pool-bulkhead 是用于配置线程池 Bulkhead（舱壁）策略的功能。线程池 Bulkhead 是一种资源隔离策略，它与普通的 Bulkhead 策略不同，Bulkhead 策略是基于信号量进行资源隔离，而线程池 Bulkhead 则是基于线程池进行资源隔离。</p><p>线程池 Bulkhead 的作用是限制系统中线程池的并发线程数，防止过多的任务同时进入线程池而导致系统资源耗尽、响应缓慢甚至崩溃的情况。</p><p>举例来说，假设我们有一个后端服务，处理用户请求的业务逻辑可能会涉及到一些耗时的操作，比如调用其他服务、IO 操作等。如果不加控制地将所有请求都提交给线程池处理，可能会导致线程池中的线程数量过多，从而消耗掉系统的内存和 CPU 资源，导致系统性能下降甚至崩溃。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">resilience4j.thread-pool-bulkhead</span><span class="token punctuation">:</span>
  <span class="token key atrule">configs</span><span class="token punctuation">:</span>
    <span class="token key atrule">default</span><span class="token punctuation">:</span>
      <span class="token key atrule">maxThreadPoolSize</span><span class="token punctuation">:</span> <span class="token number">4</span> <span class="token comment"># 最大线程池大小为 4</span>
      <span class="token key atrule">coreThreadPoolSize</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># 核心线程池大小为 2</span>
      <span class="token key atrule">queueCapacity</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># 队列容量为 2</span>
  <span class="token key atrule">instances</span><span class="token punctuation">:</span>
    <span class="token key atrule">backendA</span><span class="token punctuation">:</span>
      <span class="token key atrule">baseConfig</span><span class="token punctuation">:</span> default <span class="token comment"># 使用默认配置</span>
    <span class="token key atrule">backendB</span><span class="token punctuation">:</span>
      <span class="token key atrule">maxThreadPoolSize</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 后端 B 的最大线程池大小为 1</span>
      <span class="token key atrule">coreThreadPoolSize</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 后端 B 的核心线程池大小为 1</span>
      <span class="token key atrule">queueCapacity</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 后端 B 的队列容量为 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们配置了一个默认的线程池 Bulkhead 策略，将最大线程池大小设置为 4，核心线程池大小设置为 2，并设置了队列容量为 2。然后，我们为两个后端服务分别配置了不同的线程池 Bulkhead 实例，以适应它们不同的性能需求。</p><ul><li>限流</li></ul><p>假设我们有一个需要保护的后端服务，这个服务需要调用外部资源（如数据库、API 等），为了防止过多的请求导致资源耗尽或系统崩溃，我们使用 resilience4j.ratelimiter 来限制每个时间周期内允许的最大请求数。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">resilience4j.ratelimiter</span><span class="token punctuation">:</span> <span class="token comment"># 配置限流器策略</span>
    <span class="token key atrule">configs</span><span class="token punctuation">:</span> <span class="token comment"># 配置限流器策略的选项</span>
        <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 默认策略</span>
            <span class="token key atrule">registerHealthIndicator</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否注册健康指示器，默认为 false</span>
            <span class="token key atrule">limitForPeriod</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 每个时间周期的限流阈值，表示每个时间周期内允许的最大请求数</span>
            <span class="token key atrule">limitRefreshPeriod</span><span class="token punctuation">:</span> 1s <span class="token comment"># 限流周期，表示限流阈值重置的时间周期</span>
            <span class="token key atrule">timeoutDuration</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 超时持续时间，表示请求等待执行的最长时间，单位为毫秒，0 表示无限期等待</span>
            <span class="token key atrule">eventConsumerBufferSize</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token comment"># 事件消费者缓冲区大小，表示事件消费者队列的最大容量</span>
    <span class="token key atrule">instances</span><span class="token punctuation">:</span> <span class="token comment"># 配置限流器策略的实例</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span> <span class="token comment"># 后端 A</span>
            <span class="token key atrule">baseConfig</span><span class="token punctuation">:</span> default <span class="token comment"># 使用默认的配置</span>
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span> <span class="token comment"># 后端 B</span>
            <span class="token key atrule">limitForPeriod</span><span class="token punctuation">:</span> <span class="token number">6</span> <span class="token comment"># 后端 B 的每个时间周期的限流阈值为 6</span>
            <span class="token key atrule">limitRefreshPeriod</span><span class="token punctuation">:</span> 500ms <span class="token comment"># 后端 B 的限流周期为 500 毫秒</span>
            <span class="token key atrule">timeoutDuration</span><span class="token punctuation">:</span> 3s <span class="token comment"># 后端 B 的超时持续时间为 3 秒</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们配置了两个后端服务 backendA 和 backendB，它们分别有不同的限流策略。</p><p>对于 backendA，我们使用了默认配置，即每个时间周期内允许的最大请求数为 10，限流周期为 1 秒。这意味着 backendA 每秒最多只能处理 10 个请求。 对于 backendB，我们将每个时间周期内允许的最大请求数限制为 6，限流周期为 500 毫秒，超时持续时间为 3 秒。这表示 backendB 每 500 毫秒最多只能处理 6 个请求，超过这个限制的请求将会被拒绝，而且请求最长等待执行的时间为 3 秒,即请求等待执行的最长时间3s。如果请求在指定的超时时间内未能执行完成，那么该请求将被视为超时，不再等待执行，而是被快速拒绝或抛出超时异常。。 通过这样的配置，我们可以有效地保护后端服务，避免过多的请求导致资源耗尽，提高系统的稳定性和可靠性。</p><ul><li>超时：</li></ul><p>resilience4j.timelimiter 用于设置时间限制器，即限制方法的执行时间。它可以确保方法在指定的时间内执行完成，如果执行时间超过了设定的时间限制，将会触发超时操作，防止方法执行时间过长导致系统资源的浪费或系统性能下降。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">resilience4j.timelimiter</span><span class="token punctuation">:</span> <span class="token comment"># 配置时间限制器策略</span>
    <span class="token key atrule">configs</span><span class="token punctuation">:</span> <span class="token comment"># 配置时间限制器策略的选项</span>
        <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 默认策略</span>
            <span class="token key atrule">cancelRunningFuture</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否取消正在运行的 Future，默认为 false，表示不取消正在运行的 Future</span>
            <span class="token key atrule">timeoutDuration</span><span class="token punctuation">:</span> 2s <span class="token comment"># 超时持续时间，表示请求的最长等待时间，单位为秒</span>
    <span class="token key atrule">instances</span><span class="token punctuation">:</span> <span class="token comment"># 配置时间限制器策略的实例</span>
        <span class="token key atrule">backendA</span><span class="token punctuation">:</span> <span class="token comment"># 后端 A</span>
            <span class="token key atrule">baseConfig</span><span class="token punctuation">:</span> default <span class="token comment"># 使用默认的配置</span>
        <span class="token key atrule">backendB</span><span class="token punctuation">:</span> <span class="token comment"># 后端 B</span>
            <span class="token key atrule">baseConfig</span><span class="token punctuation">:</span> default <span class="token comment"># 使用默认的配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,97),l=[p];function c(o,i){return s(),a("div",null,l)}const k=n(e,[["render",c],["__file","0.resilience4j.html.vue"]]);export{k as default};
