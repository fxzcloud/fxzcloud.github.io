import{_ as n,V as s,W as a,$ as t}from"./framework-159025ca.js";const p={},e=t(`<h1 id="spring常见注解" tabindex="-1"><a class="header-anchor" href="#spring常见注解" aria-hidden="true">#</a> spring常见注解</h1><h1 id="lookup" tabindex="-1"><a class="header-anchor" href="#lookup" aria-hidden="true">#</a> @Lookup</h1><p><strong>使用场景</strong>：A 依赖多例bean B，可以使用Lookup 注解在A中定义一个方法，该方法每次都会从容器中获取一个bean，因为B 是多例的，所以每次都是返回新的对象。</p><ul><li>这个注解标注在方法上。</li><li>如果一个bean对象中的<strong>方法</strong>标注了 Lookup注解，那么会生成代理对象放入 bean容器中(在是实例化阶段通过后置处理器解析注解属性信息，通过cglib生成代理对象)。</li><li>执行代理对象的方法，如果方法是标注了 Lookup 注解的方法时，会直接返回 Lookup 需要查找的bean，并不会执行方法体。</li></ul><ol><li>如果 BeanDefinition 设置了 <code>instanceSupplier</code> 属性，直接调用该接口返回实例对象，会导致 <code>@Lookup</code> 失效。</li><li>如果 BeanFactoryName 不为空，即是通过 <code>@Bean</code> 注册的情况，同样会导致 <code>@Lookup</code> 失效。</li><li>实例化 Bean 时，涉及到了代理的逻辑。标注了 <code>@Lookup</code> 注解的 Bean 在实例化时返回 CGLIB 生成的代理对象，执行方法时会被代理对象拦截，具体的拦截动作由 <code>LookupOverrideMethodInterceptor</code> 实现。</li></ol><p>​</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>推断构造阶段，获取类方法上<span class="token annotation punctuation">@Lookup</span>注解信息到beanDefintion中。后面用。
记录到 <span class="token class-name">BeanDefinition</span> 中
会在bean实例化的时候，判断是否有 <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name">AbstractBeanDefinition</span>#methodOverrides<span class="token punctuation">}</span> 属性，属性不为空，
就会创建代理对象。
<span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name">AbstractAutowireCapableBeanFactory</span>#<span class="token function">instantiateBean</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name">SimpleInstantiationStrategy</span>#<span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token class-name">RootBeanDefinition</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactory</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name">CglibSubclassingInstantiationStrategy</span>#<span class="token function">instantiateWithMethodInjection</span><span class="token punctuation">(</span><span class="token class-name">RootBeanDefinition</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactory</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name">CglibSubclassingInstantiationStrategy</span>#<span class="token function">instantiateWithMethodInjection</span><span class="token punctuation">(</span><span class="token class-name">RootBeanDefinition</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactory</span><span class="token punctuation">,</span> <span class="token class-name">Constructor</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CglibSubclassCreator</span><span class="token punctuation">(</span>bd<span class="token punctuation">,</span> owner<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>ctor<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name">CglibSubclassingInstantiationStrategy<span class="token punctuation">.</span>CglibSubclassCreator</span>#<span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name">CglibSubclassingInstantiationStrategy<span class="token punctuation">.</span>CglibSubclassCreator</span>#<span class="token function">createEnhancedSubclass</span><span class="token punctuation">(</span><span class="token class-name">RootBeanDefinition</span><span class="token punctuation">)</span><span class="token punctuation">}</span>

instance <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>subclass<span class="token punctuation">)</span><span class="token punctuation">;</span>
instance <span class="token operator">=</span> enhancedSubclassConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AutowiredAnnotationBeanPostProcessor</span><span class="token operator">:</span> 

<span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">determineCandidateConstructors</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">BeanCreationException</span> <span class="token punctuation">{</span>

    <span class="token comment">// 没有校验过是否有Lookup方法</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>lookupMethodsChecked<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 是候选类，可以简单理解。不是java包下的类，不是Ordered类 就是候选类
         * */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">isCandidateClass</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> <span class="token class-name">Lookup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass <span class="token operator">=</span> beanClass<span class="token punctuation">;</span>
                <span class="token keyword">do</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 遍历类的所有方法</span>
                    <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">doWithLocalMethods</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> method <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Lookup</span> lookup <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Lookup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 方法上有 @Lookup 注解</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>lookup <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;No BeanFactory available&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token comment">// 装饰成 LookupOverride 对象</span>
                            <span class="token class-name">LookupOverride</span> override <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LookupOverride</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> lookup<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                                <span class="token comment">// 拿到这个beanName 的 BeanDefinition</span>
                                <span class="token class-name">RootBeanDefinition</span> mbd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RootBeanDefinition</span><span class="token punctuation">)</span>
                                        <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getMergedBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                              
          							
                                mbd<span class="token punctuation">.</span><span class="token function">getMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addOverride</span><span class="token punctuation">(</span>override<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>
                                        <span class="token string">&quot;Cannot apply @Lookup to beans without corresponding bean definition&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 递归解析父类的方法</span>
                    targetClass <span class="token operator">=</span> targetClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> targetClass <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">&quot;Lookup method resolution failed&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 记录这个beanName 已经处理过了</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lookupMethodsChecked<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LookupOverrideMethodInterceptor</span><span class="token operator">:</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> mp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// Cast is safe, as CallbackFilter filters are used selectively.</span>
    <span class="token class-name">LookupOverride</span> lo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LookupOverride</span><span class="token punctuation">)</span> <span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOverride</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>lo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;LookupOverride not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> args <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// if no-arg, don&#39;t insist on args at all</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>lo<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token punctuation">(</span>argsToUse <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>lo<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span> <span class="token operator">:</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>lo<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Detect package-protected NullBean instance through equals(null) check</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// Find target bean matching the (potentially generic) method return type</span>
        <span class="token class-name">ResolvableType</span> genericReturnType <span class="token operator">=</span> <span class="token class-name">ResolvableType</span><span class="token punctuation">.</span><span class="token function">forMethodReturnType</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>argsToUse <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">.</span><span class="token function">getBeanProvider</span><span class="token punctuation">(</span>genericReturnType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>argsToUse<span class="token punctuation">)</span> <span class="token operator">:</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">.</span><span class="token function">getBeanProvider</span><span class="token punctuation">(</span>genericReturnType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="dependson" tabindex="-1"><a class="header-anchor" href="#dependson" aria-hidden="true">#</a> @DependsOn</h1><p><code>@DependsOn</code> 表示依赖关系，在获取当前bean的时候会先获取<code>@DependsOn</code>的值。比如：在getBean(A) 的时候，会获取<code>@DependsOn</code> 的值，遍历注解的值 getBean(b)。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AbstractBeanFactory</span><span class="token operator">:</span>

<span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">doGetBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token keyword">boolean</span> typeCheckOnly<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>

  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    
            <span class="token comment">// 依赖bean 的名称</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dependsOn <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getDependsOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dependsOn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token doc-comment comment">/**
                 * A 依赖了 B，B 依赖了 A 即循环依赖的情况，抛出 BeanCreationException异常
                 * 比如：
                 * @Component
                 * @DependsOn(<span class="token punctuation">{</span>&quot;b1&quot;<span class="token punctuation">}</span>)
                 * class A1 <span class="token punctuation">{</span><span class="token punctuation">}</span>
                 *
                 * @Component
                 * @DependsOn(<span class="token punctuation">{</span>&quot;a1&quot;<span class="token punctuation">}</span>)
                 * class b1 <span class="token punctuation">{</span>
                 *
                 * <span class="token punctuation">}</span>
                 */</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> dep <span class="token operator">:</span> dependsOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// beanName是当前正在创建的bean,dep是正在创建的bean 依赖的bean的名称</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDependent</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>
                                <span class="token string">&quot;Circular depends-on relationship between &#39;&quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">&quot;&#39; and &#39;&quot;</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token doc-comment comment">/**
                     * 保存的是 bean 和 依赖beanName之间的映射关系
                     * 被依赖bean：依赖beanList
                     *
                     * 依赖bean：被依赖beanList
                     * */</span>
                    <span class="token function">registerDependentBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 取 dependOn的bean，从这里体现出 依赖bean 会先创建</span>
                        <span class="token function">getBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>
                                <span class="token string">&quot;&#39;&quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">&quot;&#39; depends on missing bean &#39;&quot;</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

 	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
       
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="lazy" tabindex="-1"><a class="header-anchor" href="#lazy" aria-hidden="true">#</a> @Lazy</h1><p><code>@Lazy</code> 注解用于指示Spring容器在需要的时候才会初始化被注解的Bean。</p><p>默认情况下，Spring容器在启动时就会实例化所有的单例Bean，但通过使用 <code>@Lazy</code> 注解，可以将Bean的初始化推迟到首次被请求的时候。</p><ol><li><p><strong>懒加载：</strong> Bean被标记为 <code>@Lazy</code> 后，只有在第一次被请求时才会被实例化。这对于某些资源消耗较大的Bean，或者在启动时不需要立即初始化的Bean很有用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Lazy</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLazyBean</span> <span class="token punctuation">{</span>
    <span class="token comment">// Bean 的定义</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>单例模式下的懒加载：</strong> 默认情况下，Spring容器在启动时会实例化所有的单例Bean。但如果某个单例Bean标记了 <code>@Lazy</code> 注解，那么它将在首次被请求时进行初始化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Lazy</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLazySingletonBean</span> <span class="token punctuation">{</span>
    <span class="token comment">// 单例 Bean 的定义</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>需要注意的是，<code>@Lazy</code> 注解主要用于单例Bean。对于原型（prototype）作用域的Bean，因为每次请求都会创建新的实例，懒加载的概念并不适用。</p><p><strong>过程：</strong></p><ol><li><p><strong>创建Bean：</strong></p><ul><li><code>AbstractAutowireCapableBeanFactory#createBean</code>和<code>doCreateBean</code>方法是在Bean的创建阶段执行的核心方法。这两个方法负责实例化和初始化Bean，执行构造函数和各种初始化方法。</li></ul></li><li><p><strong>填充Bean：</strong></p><ul><li><code>AbstractAutowireCapableBeanFactory#populateBean</code>方法用于填充Bean的属性。在Bean实例创建后，该方法将通过依赖注入等方式将属性值注入到Bean中，确保Bean的各个属性都得到正确的初始化。</li></ul></li><li><p><strong>后置处理器解析属性值：</strong></p><ul><li><p><code>AutowiredAnnotationBeanPostProcessor#postProcessProperties</code>方法是后置处理器的一部分。它负责解析带有<code>@Autowired</code>注解的属性，处理属性值的注入。其中，<code>InjectionMetadata#inject</code>方法用于实际注入属性值。</p></li><li><p>对于<code>@Lazy</code>注解，Spring使用<code>ContextAnnotationAutowireCandidateResolver</code>来处理。它的<code>getLazyResolutionProxyIfNecessary</code>方法检查是否需要创建<code>@Lazy</code>代理对象。如果需要，就会使用CGLIB或JDK动态代理生成代理对象。这个代理对象的逻辑由<code>CglibAopProxy.DynamicAdvisedInterceptor</code>或<code>JdkDynamicAopProxy</code>定义。</p></li><li><p><code>AbstractAutowireCapableBeanFactory#applyPropertyValues</code>方法将解析后的属性值设置到Bean中。这是Bean填充阶段的最后一步，确保Bean实例的所有属性都正确设置。</p></li></ul></li></ol>`,19),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","LookUp、DependsOn、Lazy.html.vue"]]);export{k as default};
